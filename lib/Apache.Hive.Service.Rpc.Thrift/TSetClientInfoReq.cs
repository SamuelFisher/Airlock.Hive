/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Threading;
using System.Threading.Tasks;
using Thrift;
using Thrift.Collections;

using Thrift.Protocols;
using Thrift.Protocols.Entities;
using Thrift.Protocols.Utilities;
using Thrift.Transports;
using Thrift.Transports.Client;
using Thrift.Transports.Server;


namespace Apache.Hive.Service.Rpc.Thrift
{

  public partial class TSetClientInfoReq : TBase
  {
    private Dictionary<string, string> _configuration;

    public TSessionHandle SessionHandle { get; set; }

    public Dictionary<string, string> Configuration
    {
      get
      {
        return _configuration;
      }
      set
      {
        __isset.configuration = true;
        this._configuration = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool configuration;
    }

    public TSetClientInfoReq()
    {
    }

    public TSetClientInfoReq(TSessionHandle sessionHandle) : this()
    {
      this.SessionHandle = sessionHandle;
    }

    public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        bool isset_sessionHandle = false;
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct)
              {
                SessionHandle = new TSessionHandle();
                await SessionHandle.ReadAsync(iprot, cancellationToken);
                isset_sessionHandle = true;
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 2:
              if (field.Type == TType.Map)
              {
                {
                  Configuration = new Dictionary<string, string>();
                  TMap _map81 = await iprot.ReadMapBeginAsync(cancellationToken);
                  for(int _i82 = 0; _i82 < _map81.Count; ++_i82)
                  {
                    string _key83;
                    string _val84;
                    _key83 = await iprot.ReadStringAsync(cancellationToken);
                    _val84 = await iprot.ReadStringAsync(cancellationToken);
                    Configuration[_key83] = _val84;
                  }
                  await iprot.ReadMapEndAsync(cancellationToken);
                }
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
        if (!isset_sessionHandle)
        {
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        }
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var struc = new TStruct("TSetClientInfoReq");
        await oprot.WriteStructBeginAsync(struc, cancellationToken);
        var field = new TField();
        field.Name = "sessionHandle";
        field.Type = TType.Struct;
        field.ID = 1;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await SessionHandle.WriteAsync(oprot, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
        if (Configuration != null && __isset.configuration)
        {
          field.Name = "configuration";
          field.Type = TType.Map;
          field.ID = 2;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          {
            await oprot.WriteMapBeginAsync(new TMap(TType.String, TType.String, Configuration.Count), cancellationToken);
            foreach (string _iter85 in Configuration.Keys)
            {
              await oprot.WriteStringAsync(_iter85, cancellationToken);
              await oprot.WriteStringAsync(Configuration[_iter85], cancellationToken);
            }
            await oprot.WriteMapEndAsync(cancellationToken);
          }
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString()
    {
      var sb = new StringBuilder("TSetClientInfoReq(");
      sb.Append(", SessionHandle: ");
      sb.Append(SessionHandle== null ? "<null>" : SessionHandle.ToString());
      if (Configuration != null && __isset.configuration)
      {
        sb.Append(", Configuration: ");
        sb.Append(Configuration);
      }
      sb.Append(")");
      return sb.ToString();
    }
  }

}
