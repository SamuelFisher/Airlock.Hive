/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Threading;
using System.Threading.Tasks;
using Thrift;
using Thrift.Collections;

using Thrift.Protocols;
using Thrift.Protocols.Entities;
using Thrift.Protocols.Utilities;
using Thrift.Transports;
using Thrift.Transports.Client;
using Thrift.Transports.Server;


namespace Apache.Hive.Service.Rpc.Thrift
{

  public partial class TOperationHandle : TBase
  {
    private double _modifiedRowCount;

    public THandleIdentifier OperationId { get; set; }

    /// <summary>
    /// 
    /// <seealso cref="TOperationType"/>
    /// </summary>
    public TOperationType OperationType { get; set; }

    public bool HasResultSet { get; set; }

    public double ModifiedRowCount
    {
      get
      {
        return _modifiedRowCount;
      }
      set
      {
        __isset.modifiedRowCount = true;
        this._modifiedRowCount = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool modifiedRowCount;
    }

    public TOperationHandle()
    {
    }

    public TOperationHandle(THandleIdentifier operationId, TOperationType operationType, bool hasResultSet) : this()
    {
      this.OperationId = operationId;
      this.OperationType = operationType;
      this.HasResultSet = hasResultSet;
    }

    public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        bool isset_operationId = false;
        bool isset_operationType = false;
        bool isset_hasResultSet = false;
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct)
              {
                OperationId = new THandleIdentifier();
                await OperationId.ReadAsync(iprot, cancellationToken);
                isset_operationId = true;
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 2:
              if (field.Type == TType.I32)
              {
                OperationType = (TOperationType)await iprot.ReadI32Async(cancellationToken);
                isset_operationType = true;
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 3:
              if (field.Type == TType.Bool)
              {
                HasResultSet = await iprot.ReadBoolAsync(cancellationToken);
                isset_hasResultSet = true;
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 4:
              if (field.Type == TType.Double)
              {
                ModifiedRowCount = await iprot.ReadDoubleAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
        if (!isset_operationId)
        {
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        }
        if (!isset_operationType)
        {
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        }
        if (!isset_hasResultSet)
        {
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        }
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var struc = new TStruct("TOperationHandle");
        await oprot.WriteStructBeginAsync(struc, cancellationToken);
        var field = new TField();
        field.Name = "operationId";
        field.Type = TType.Struct;
        field.ID = 1;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await OperationId.WriteAsync(oprot, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
        field.Name = "operationType";
        field.Type = TType.I32;
        field.ID = 2;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteI32Async((int)OperationType, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
        field.Name = "hasResultSet";
        field.Type = TType.Bool;
        field.ID = 3;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteBoolAsync(HasResultSet, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
        if (__isset.modifiedRowCount)
        {
          field.Name = "modifiedRowCount";
          field.Type = TType.Double;
          field.ID = 4;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteDoubleAsync(ModifiedRowCount, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString()
    {
      var sb = new StringBuilder("TOperationHandle(");
      sb.Append(", OperationId: ");
      sb.Append(OperationId== null ? "<null>" : OperationId.ToString());
      sb.Append(", OperationType: ");
      sb.Append(OperationType);
      sb.Append(", HasResultSet: ");
      sb.Append(HasResultSet);
      if (__isset.modifiedRowCount)
      {
        sb.Append(", ModifiedRowCount: ");
        sb.Append(ModifiedRowCount);
      }
      sb.Append(")");
      return sb.ToString();
    }
  }

}
