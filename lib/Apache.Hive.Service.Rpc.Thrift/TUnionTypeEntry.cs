/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Threading;
using System.Threading.Tasks;
using Thrift;
using Thrift.Collections;

using Thrift.Protocols;
using Thrift.Protocols.Entities;
using Thrift.Protocols.Utilities;
using Thrift.Transports;
using Thrift.Transports.Client;
using Thrift.Transports.Server;


namespace Apache.Hive.Service.Rpc.Thrift
{

  public partial class TUnionTypeEntry : TBase
  {

    public Dictionary<string, int> NameToTypePtr { get; set; }

    public TUnionTypeEntry()
    {
    }

    public TUnionTypeEntry(Dictionary<string, int> nameToTypePtr) : this()
    {
      this.NameToTypePtr = nameToTypePtr;
    }

    public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        bool isset_nameToTypePtr = false;
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Map)
              {
                {
                  NameToTypePtr = new Dictionary<string, int>();
                  TMap _map10 = await iprot.ReadMapBeginAsync(cancellationToken);
                  for(int _i11 = 0; _i11 < _map10.Count; ++_i11)
                  {
                    string _key12;
                    int _val13;
                    _key12 = await iprot.ReadStringAsync(cancellationToken);
                    _val13 = await iprot.ReadI32Async(cancellationToken);
                    NameToTypePtr[_key12] = _val13;
                  }
                  await iprot.ReadMapEndAsync(cancellationToken);
                }
                isset_nameToTypePtr = true;
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
        if (!isset_nameToTypePtr)
        {
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        }
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var struc = new TStruct("TUnionTypeEntry");
        await oprot.WriteStructBeginAsync(struc, cancellationToken);
        var field = new TField();
        field.Name = "nameToTypePtr";
        field.Type = TType.Map;
        field.ID = 1;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        {
          await oprot.WriteMapBeginAsync(new TMap(TType.String, TType.I32, NameToTypePtr.Count), cancellationToken);
          foreach (string _iter14 in NameToTypePtr.Keys)
          {
            await oprot.WriteStringAsync(_iter14, cancellationToken);
            await oprot.WriteI32Async(NameToTypePtr[_iter14], cancellationToken);
          }
          await oprot.WriteMapEndAsync(cancellationToken);
        }
        await oprot.WriteFieldEndAsync(cancellationToken);
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString()
    {
      var sb = new StringBuilder("TUnionTypeEntry(");
      sb.Append(", NameToTypePtr: ");
      sb.Append(NameToTypePtr);
      sb.Append(")");
      return sb.ToString();
    }
  }

}
