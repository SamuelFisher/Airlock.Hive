/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Threading;
using System.Threading.Tasks;
using Thrift;
using Thrift.Collections;

using Thrift.Protocols;
using Thrift.Protocols.Entities;
using Thrift.Protocols.Utilities;
using Thrift.Transports;
using Thrift.Transports.Client;
using Thrift.Transports.Server;


namespace Apache.Hive.Service.Rpc.Thrift
{

  public partial class TColumnValue : TBase
  {
    private TBoolValue _boolVal;
    private TByteValue _byteVal;
    private TI16Value _i16Val;
    private TI32Value _i32Val;
    private TI64Value _i64Val;
    private TDoubleValue _doubleVal;
    private TStringValue _stringVal;

    public TBoolValue BoolVal
    {
      get
      {
        return _boolVal;
      }
      set
      {
        __isset.boolVal = true;
        this._boolVal = value;
      }
    }

    public TByteValue ByteVal
    {
      get
      {
        return _byteVal;
      }
      set
      {
        __isset.byteVal = true;
        this._byteVal = value;
      }
    }

    public TI16Value I16Val
    {
      get
      {
        return _i16Val;
      }
      set
      {
        __isset.i16Val = true;
        this._i16Val = value;
      }
    }

    public TI32Value I32Val
    {
      get
      {
        return _i32Val;
      }
      set
      {
        __isset.i32Val = true;
        this._i32Val = value;
      }
    }

    public TI64Value I64Val
    {
      get
      {
        return _i64Val;
      }
      set
      {
        __isset.i64Val = true;
        this._i64Val = value;
      }
    }

    public TDoubleValue DoubleVal
    {
      get
      {
        return _doubleVal;
      }
      set
      {
        __isset.doubleVal = true;
        this._doubleVal = value;
      }
    }

    public TStringValue StringVal
    {
      get
      {
        return _stringVal;
      }
      set
      {
        __isset.stringVal = true;
        this._stringVal = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool boolVal;
      public bool byteVal;
      public bool i16Val;
      public bool i32Val;
      public bool i64Val;
      public bool doubleVal;
      public bool stringVal;
    }

    public TColumnValue()
    {
    }

    public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct)
              {
                BoolVal = new TBoolValue();
                await BoolVal.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 2:
              if (field.Type == TType.Struct)
              {
                ByteVal = new TByteValue();
                await ByteVal.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 3:
              if (field.Type == TType.Struct)
              {
                I16Val = new TI16Value();
                await I16Val.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 4:
              if (field.Type == TType.Struct)
              {
                I32Val = new TI32Value();
                await I32Val.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 5:
              if (field.Type == TType.Struct)
              {
                I64Val = new TI64Value();
                await I64Val.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 6:
              if (field.Type == TType.Struct)
              {
                DoubleVal = new TDoubleValue();
                await DoubleVal.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 7:
              if (field.Type == TType.Struct)
              {
                StringVal = new TStringValue();
                await StringVal.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var struc = new TStruct("TColumnValue");
        await oprot.WriteStructBeginAsync(struc, cancellationToken);
        var field = new TField();
        if (BoolVal != null && __isset.boolVal)
        {
          field.Name = "boolVal";
          field.Type = TType.Struct;
          field.ID = 1;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await BoolVal.WriteAsync(oprot, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (ByteVal != null && __isset.byteVal)
        {
          field.Name = "byteVal";
          field.Type = TType.Struct;
          field.ID = 2;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await ByteVal.WriteAsync(oprot, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (I16Val != null && __isset.i16Val)
        {
          field.Name = "i16Val";
          field.Type = TType.Struct;
          field.ID = 3;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await I16Val.WriteAsync(oprot, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (I32Val != null && __isset.i32Val)
        {
          field.Name = "i32Val";
          field.Type = TType.Struct;
          field.ID = 4;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await I32Val.WriteAsync(oprot, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (I64Val != null && __isset.i64Val)
        {
          field.Name = "i64Val";
          field.Type = TType.Struct;
          field.ID = 5;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await I64Val.WriteAsync(oprot, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (DoubleVal != null && __isset.doubleVal)
        {
          field.Name = "doubleVal";
          field.Type = TType.Struct;
          field.ID = 6;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await DoubleVal.WriteAsync(oprot, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (StringVal != null && __isset.stringVal)
        {
          field.Name = "stringVal";
          field.Type = TType.Struct;
          field.ID = 7;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await StringVal.WriteAsync(oprot, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString()
    {
      var sb = new StringBuilder("TColumnValue(");
      bool __first = true;
      if (BoolVal != null && __isset.boolVal)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("BoolVal: ");
        sb.Append(BoolVal== null ? "<null>" : BoolVal.ToString());
      }
      if (ByteVal != null && __isset.byteVal)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("ByteVal: ");
        sb.Append(ByteVal== null ? "<null>" : ByteVal.ToString());
      }
      if (I16Val != null && __isset.i16Val)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("I16Val: ");
        sb.Append(I16Val== null ? "<null>" : I16Val.ToString());
      }
      if (I32Val != null && __isset.i32Val)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("I32Val: ");
        sb.Append(I32Val== null ? "<null>" : I32Val.ToString());
      }
      if (I64Val != null && __isset.i64Val)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("I64Val: ");
        sb.Append(I64Val== null ? "<null>" : I64Val.ToString());
      }
      if (DoubleVal != null && __isset.doubleVal)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("DoubleVal: ");
        sb.Append(DoubleVal== null ? "<null>" : DoubleVal.ToString());
      }
      if (StringVal != null && __isset.stringVal)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("StringVal: ");
        sb.Append(StringVal== null ? "<null>" : StringVal.ToString());
      }
      sb.Append(")");
      return sb.ToString();
    }
  }

}
