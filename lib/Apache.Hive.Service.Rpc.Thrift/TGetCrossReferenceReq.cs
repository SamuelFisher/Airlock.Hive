/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Threading;
using System.Threading.Tasks;
using Thrift;
using Thrift.Collections;

using Thrift.Protocols;
using Thrift.Protocols.Entities;
using Thrift.Protocols.Utilities;
using Thrift.Transports;
using Thrift.Transports.Client;
using Thrift.Transports.Server;


namespace Apache.Hive.Service.Rpc.Thrift
{

  public partial class TGetCrossReferenceReq : TBase
  {
    private string _parentCatalogName;
    private string _parentSchemaName;
    private string _parentTableName;
    private string _foreignCatalogName;
    private string _foreignSchemaName;
    private string _foreignTableName;

    public TSessionHandle SessionHandle { get; set; }

    public string ParentCatalogName
    {
      get
      {
        return _parentCatalogName;
      }
      set
      {
        __isset.parentCatalogName = true;
        this._parentCatalogName = value;
      }
    }

    public string ParentSchemaName
    {
      get
      {
        return _parentSchemaName;
      }
      set
      {
        __isset.parentSchemaName = true;
        this._parentSchemaName = value;
      }
    }

    public string ParentTableName
    {
      get
      {
        return _parentTableName;
      }
      set
      {
        __isset.parentTableName = true;
        this._parentTableName = value;
      }
    }

    public string ForeignCatalogName
    {
      get
      {
        return _foreignCatalogName;
      }
      set
      {
        __isset.foreignCatalogName = true;
        this._foreignCatalogName = value;
      }
    }

    public string ForeignSchemaName
    {
      get
      {
        return _foreignSchemaName;
      }
      set
      {
        __isset.foreignSchemaName = true;
        this._foreignSchemaName = value;
      }
    }

    public string ForeignTableName
    {
      get
      {
        return _foreignTableName;
      }
      set
      {
        __isset.foreignTableName = true;
        this._foreignTableName = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool parentCatalogName;
      public bool parentSchemaName;
      public bool parentTableName;
      public bool foreignCatalogName;
      public bool foreignSchemaName;
      public bool foreignTableName;
    }

    public TGetCrossReferenceReq()
    {
    }

    public TGetCrossReferenceReq(TSessionHandle sessionHandle) : this()
    {
      this.SessionHandle = sessionHandle;
    }

    public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        bool isset_sessionHandle = false;
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct)
              {
                SessionHandle = new TSessionHandle();
                await SessionHandle.ReadAsync(iprot, cancellationToken);
                isset_sessionHandle = true;
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 2:
              if (field.Type == TType.String)
              {
                ParentCatalogName = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 3:
              if (field.Type == TType.String)
              {
                ParentSchemaName = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 4:
              if (field.Type == TType.String)
              {
                ParentTableName = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 5:
              if (field.Type == TType.String)
              {
                ForeignCatalogName = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 6:
              if (field.Type == TType.String)
              {
                ForeignSchemaName = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 7:
              if (field.Type == TType.String)
              {
                ForeignTableName = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
        if (!isset_sessionHandle)
        {
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        }
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var struc = new TStruct("TGetCrossReferenceReq");
        await oprot.WriteStructBeginAsync(struc, cancellationToken);
        var field = new TField();
        field.Name = "sessionHandle";
        field.Type = TType.Struct;
        field.ID = 1;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await SessionHandle.WriteAsync(oprot, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
        if (ParentCatalogName != null && __isset.parentCatalogName)
        {
          field.Name = "parentCatalogName";
          field.Type = TType.String;
          field.ID = 2;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteStringAsync(ParentCatalogName, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (ParentSchemaName != null && __isset.parentSchemaName)
        {
          field.Name = "parentSchemaName";
          field.Type = TType.String;
          field.ID = 3;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteStringAsync(ParentSchemaName, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (ParentTableName != null && __isset.parentTableName)
        {
          field.Name = "parentTableName";
          field.Type = TType.String;
          field.ID = 4;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteStringAsync(ParentTableName, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (ForeignCatalogName != null && __isset.foreignCatalogName)
        {
          field.Name = "foreignCatalogName";
          field.Type = TType.String;
          field.ID = 5;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteStringAsync(ForeignCatalogName, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (ForeignSchemaName != null && __isset.foreignSchemaName)
        {
          field.Name = "foreignSchemaName";
          field.Type = TType.String;
          field.ID = 6;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteStringAsync(ForeignSchemaName, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (ForeignTableName != null && __isset.foreignTableName)
        {
          field.Name = "foreignTableName";
          field.Type = TType.String;
          field.ID = 7;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteStringAsync(ForeignTableName, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString()
    {
      var sb = new StringBuilder("TGetCrossReferenceReq(");
      sb.Append(", SessionHandle: ");
      sb.Append(SessionHandle== null ? "<null>" : SessionHandle.ToString());
      if (ParentCatalogName != null && __isset.parentCatalogName)
      {
        sb.Append(", ParentCatalogName: ");
        sb.Append(ParentCatalogName);
      }
      if (ParentSchemaName != null && __isset.parentSchemaName)
      {
        sb.Append(", ParentSchemaName: ");
        sb.Append(ParentSchemaName);
      }
      if (ParentTableName != null && __isset.parentTableName)
      {
        sb.Append(", ParentTableName: ");
        sb.Append(ParentTableName);
      }
      if (ForeignCatalogName != null && __isset.foreignCatalogName)
      {
        sb.Append(", ForeignCatalogName: ");
        sb.Append(ForeignCatalogName);
      }
      if (ForeignSchemaName != null && __isset.foreignSchemaName)
      {
        sb.Append(", ForeignSchemaName: ");
        sb.Append(ForeignSchemaName);
      }
      if (ForeignTableName != null && __isset.foreignTableName)
      {
        sb.Append(", ForeignTableName: ");
        sb.Append(ForeignTableName);
      }
      sb.Append(")");
      return sb.ToString();
    }
  }

}
