/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Threading;
using System.Threading.Tasks;
using Thrift;
using Thrift.Collections;

using Thrift.Protocols;
using Thrift.Protocols.Entities;
using Thrift.Protocols.Utilities;
using Thrift.Transports;
using Thrift.Transports.Client;
using Thrift.Transports.Server;


namespace Apache.Hive.Service.Rpc.Thrift
{

  public partial class TGetInfoValue : TBase
  {
    private string _stringValue;
    private short _smallIntValue;
    private int _integerBitmask;
    private int _integerFlag;
    private int _binaryValue;
    private long _lenValue;

    public string StringValue
    {
      get
      {
        return _stringValue;
      }
      set
      {
        __isset.stringValue = true;
        this._stringValue = value;
      }
    }

    public short SmallIntValue
    {
      get
      {
        return _smallIntValue;
      }
      set
      {
        __isset.smallIntValue = true;
        this._smallIntValue = value;
      }
    }

    public int IntegerBitmask
    {
      get
      {
        return _integerBitmask;
      }
      set
      {
        __isset.integerBitmask = true;
        this._integerBitmask = value;
      }
    }

    public int IntegerFlag
    {
      get
      {
        return _integerFlag;
      }
      set
      {
        __isset.integerFlag = true;
        this._integerFlag = value;
      }
    }

    public int BinaryValue
    {
      get
      {
        return _binaryValue;
      }
      set
      {
        __isset.binaryValue = true;
        this._binaryValue = value;
      }
    }

    public long LenValue
    {
      get
      {
        return _lenValue;
      }
      set
      {
        __isset.lenValue = true;
        this._lenValue = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool stringValue;
      public bool smallIntValue;
      public bool integerBitmask;
      public bool integerFlag;
      public bool binaryValue;
      public bool lenValue;
    }

    public TGetInfoValue()
    {
    }

    public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String)
              {
                StringValue = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 2:
              if (field.Type == TType.I16)
              {
                SmallIntValue = await iprot.ReadI16Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 3:
              if (field.Type == TType.I32)
              {
                IntegerBitmask = await iprot.ReadI32Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 4:
              if (field.Type == TType.I32)
              {
                IntegerFlag = await iprot.ReadI32Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 5:
              if (field.Type == TType.I32)
              {
                BinaryValue = await iprot.ReadI32Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 6:
              if (field.Type == TType.I64)
              {
                LenValue = await iprot.ReadI64Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var struc = new TStruct("TGetInfoValue");
        await oprot.WriteStructBeginAsync(struc, cancellationToken);
        var field = new TField();
        if (StringValue != null && __isset.stringValue)
        {
          field.Name = "stringValue";
          field.Type = TType.String;
          field.ID = 1;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteStringAsync(StringValue, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (__isset.smallIntValue)
        {
          field.Name = "smallIntValue";
          field.Type = TType.I16;
          field.ID = 2;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteI16Async(SmallIntValue, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (__isset.integerBitmask)
        {
          field.Name = "integerBitmask";
          field.Type = TType.I32;
          field.ID = 3;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteI32Async(IntegerBitmask, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (__isset.integerFlag)
        {
          field.Name = "integerFlag";
          field.Type = TType.I32;
          field.ID = 4;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteI32Async(IntegerFlag, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (__isset.binaryValue)
        {
          field.Name = "binaryValue";
          field.Type = TType.I32;
          field.ID = 5;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteI32Async(BinaryValue, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (__isset.lenValue)
        {
          field.Name = "lenValue";
          field.Type = TType.I64;
          field.ID = 6;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteI64Async(LenValue, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString()
    {
      var sb = new StringBuilder("TGetInfoValue(");
      bool __first = true;
      if (StringValue != null && __isset.stringValue)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("StringValue: ");
        sb.Append(StringValue);
      }
      if (__isset.smallIntValue)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("SmallIntValue: ");
        sb.Append(SmallIntValue);
      }
      if (__isset.integerBitmask)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("IntegerBitmask: ");
        sb.Append(IntegerBitmask);
      }
      if (__isset.integerFlag)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("IntegerFlag: ");
        sb.Append(IntegerFlag);
      }
      if (__isset.binaryValue)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("BinaryValue: ");
        sb.Append(BinaryValue);
      }
      if (__isset.lenValue)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("LenValue: ");
        sb.Append(LenValue);
      }
      sb.Append(")");
      return sb.ToString();
    }
  }

}
