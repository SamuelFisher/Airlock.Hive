/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Threading;
using System.Threading.Tasks;
using Thrift;
using Thrift.Collections;

using Thrift.Protocols;
using Thrift.Protocols.Entities;
using Thrift.Protocols.Utilities;
using Thrift.Transports;
using Thrift.Transports.Client;
using Thrift.Transports.Server;


namespace Apache.Hive.Service.Rpc.Thrift
{

  public partial class TColumnDesc : TBase
  {
    private string _comment;

    public string ColumnName { get; set; }

    public TTypeDesc TypeDesc { get; set; }

    public int Position { get; set; }

    public string Comment
    {
      get
      {
        return _comment;
      }
      set
      {
        __isset.comment = true;
        this._comment = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool comment;
    }

    public TColumnDesc()
    {
    }

    public TColumnDesc(string columnName, TTypeDesc typeDesc, int position) : this()
    {
      this.ColumnName = columnName;
      this.TypeDesc = typeDesc;
      this.Position = position;
    }

    public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        bool isset_columnName = false;
        bool isset_typeDesc = false;
        bool isset_position = false;
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String)
              {
                ColumnName = await iprot.ReadStringAsync(cancellationToken);
                isset_columnName = true;
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 2:
              if (field.Type == TType.Struct)
              {
                TypeDesc = new TTypeDesc();
                await TypeDesc.ReadAsync(iprot, cancellationToken);
                isset_typeDesc = true;
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 3:
              if (field.Type == TType.I32)
              {
                Position = await iprot.ReadI32Async(cancellationToken);
                isset_position = true;
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 4:
              if (field.Type == TType.String)
              {
                Comment = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
        if (!isset_columnName)
        {
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        }
        if (!isset_typeDesc)
        {
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        }
        if (!isset_position)
        {
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        }
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var struc = new TStruct("TColumnDesc");
        await oprot.WriteStructBeginAsync(struc, cancellationToken);
        var field = new TField();
        field.Name = "columnName";
        field.Type = TType.String;
        field.ID = 1;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteStringAsync(ColumnName, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
        field.Name = "typeDesc";
        field.Type = TType.Struct;
        field.ID = 2;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await TypeDesc.WriteAsync(oprot, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
        field.Name = "position";
        field.Type = TType.I32;
        field.ID = 3;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteI32Async(Position, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
        if (Comment != null && __isset.comment)
        {
          field.Name = "comment";
          field.Type = TType.String;
          field.ID = 4;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteStringAsync(Comment, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString()
    {
      var sb = new StringBuilder("TColumnDesc(");
      sb.Append(", ColumnName: ");
      sb.Append(ColumnName);
      sb.Append(", TypeDesc: ");
      sb.Append(TypeDesc== null ? "<null>" : TypeDesc.ToString());
      sb.Append(", Position: ");
      sb.Append(Position);
      if (Comment != null && __isset.comment)
      {
        sb.Append(", Comment: ");
        sb.Append(Comment);
      }
      sb.Append(")");
      return sb.ToString();
    }
  }

}
