/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Threading;
using System.Threading.Tasks;
using Thrift;
using Thrift.Collections;

using Thrift.Protocols;
using Thrift.Protocols.Entities;
using Thrift.Protocols.Utilities;
using Thrift.Transports;
using Thrift.Transports.Client;
using Thrift.Transports.Server;


namespace Apache.Hive.Service.Rpc.Thrift
{

  public partial class TFetchResultsReq : TBase
  {
    private short _fetchType;

    public TOperationHandle OperationHandle { get; set; }

    /// <summary>
    /// 
    /// <seealso cref="TFetchOrientation"/>
    /// </summary>
    public TFetchOrientation Orientation { get; set; }

    public long MaxRows { get; set; }

    public short FetchType
    {
      get
      {
        return _fetchType;
      }
      set
      {
        __isset.fetchType = true;
        this._fetchType = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool fetchType;
    }

    public TFetchResultsReq()
    {
      this.Orientation = TFetchOrientation.FETCH_NEXT;
      this._fetchType = 0;
      this.__isset.fetchType = true;
    }

    public TFetchResultsReq(TOperationHandle operationHandle, TFetchOrientation orientation, long maxRows) : this()
    {
      this.OperationHandle = operationHandle;
      this.Orientation = orientation;
      this.MaxRows = maxRows;
    }

    public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        bool isset_operationHandle = false;
        bool isset_orientation = false;
        bool isset_maxRows = false;
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct)
              {
                OperationHandle = new TOperationHandle();
                await OperationHandle.ReadAsync(iprot, cancellationToken);
                isset_operationHandle = true;
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 2:
              if (field.Type == TType.I32)
              {
                Orientation = (TFetchOrientation)await iprot.ReadI32Async(cancellationToken);
                isset_orientation = true;
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 3:
              if (field.Type == TType.I64)
              {
                MaxRows = await iprot.ReadI64Async(cancellationToken);
                isset_maxRows = true;
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 4:
              if (field.Type == TType.I16)
              {
                FetchType = await iprot.ReadI16Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
        if (!isset_operationHandle)
        {
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        }
        if (!isset_orientation)
        {
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        }
        if (!isset_maxRows)
        {
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        }
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var struc = new TStruct("TFetchResultsReq");
        await oprot.WriteStructBeginAsync(struc, cancellationToken);
        var field = new TField();
        field.Name = "operationHandle";
        field.Type = TType.Struct;
        field.ID = 1;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await OperationHandle.WriteAsync(oprot, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
        field.Name = "orientation";
        field.Type = TType.I32;
        field.ID = 2;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteI32Async((int)Orientation, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
        field.Name = "maxRows";
        field.Type = TType.I64;
        field.ID = 3;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteI64Async(MaxRows, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
        if (__isset.fetchType)
        {
          field.Name = "fetchType";
          field.Type = TType.I16;
          field.ID = 4;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteI16Async(FetchType, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString()
    {
      var sb = new StringBuilder("TFetchResultsReq(");
      sb.Append(", OperationHandle: ");
      sb.Append(OperationHandle== null ? "<null>" : OperationHandle.ToString());
      sb.Append(", Orientation: ");
      sb.Append(Orientation);
      sb.Append(", MaxRows: ");
      sb.Append(MaxRows);
      if (__isset.fetchType)
      {
        sb.Append(", FetchType: ");
        sb.Append(FetchType);
      }
      sb.Append(")");
      return sb.ToString();
    }
  }

}
