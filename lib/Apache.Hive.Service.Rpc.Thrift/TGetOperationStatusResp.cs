/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Threading;
using System.Threading.Tasks;
using Thrift;
using Thrift.Collections;

using Thrift.Protocols;
using Thrift.Protocols.Entities;
using Thrift.Protocols.Utilities;
using Thrift.Transports;
using Thrift.Transports.Client;
using Thrift.Transports.Server;


namespace Apache.Hive.Service.Rpc.Thrift
{

  public partial class TGetOperationStatusResp : TBase
  {
    private TOperationState _operationState;
    private string _sqlState;
    private int _errorCode;
    private string _errorMessage;
    private string _taskStatus;
    private long _operationStarted;
    private long _operationCompleted;
    private bool _hasResultSet;
    private TProgressUpdateResp _progressUpdateResponse;

    public TStatus Status { get; set; }

    /// <summary>
    /// 
    /// <seealso cref="TOperationState"/>
    /// </summary>
    public TOperationState OperationState
    {
      get
      {
        return _operationState;
      }
      set
      {
        __isset.operationState = true;
        this._operationState = value;
      }
    }

    public string SqlState
    {
      get
      {
        return _sqlState;
      }
      set
      {
        __isset.sqlState = true;
        this._sqlState = value;
      }
    }

    public int ErrorCode
    {
      get
      {
        return _errorCode;
      }
      set
      {
        __isset.errorCode = true;
        this._errorCode = value;
      }
    }

    public string ErrorMessage
    {
      get
      {
        return _errorMessage;
      }
      set
      {
        __isset.errorMessage = true;
        this._errorMessage = value;
      }
    }

    public string TaskStatus
    {
      get
      {
        return _taskStatus;
      }
      set
      {
        __isset.taskStatus = true;
        this._taskStatus = value;
      }
    }

    public long OperationStarted
    {
      get
      {
        return _operationStarted;
      }
      set
      {
        __isset.operationStarted = true;
        this._operationStarted = value;
      }
    }

    public long OperationCompleted
    {
      get
      {
        return _operationCompleted;
      }
      set
      {
        __isset.operationCompleted = true;
        this._operationCompleted = value;
      }
    }

    public bool HasResultSet
    {
      get
      {
        return _hasResultSet;
      }
      set
      {
        __isset.hasResultSet = true;
        this._hasResultSet = value;
      }
    }

    public TProgressUpdateResp ProgressUpdateResponse
    {
      get
      {
        return _progressUpdateResponse;
      }
      set
      {
        __isset.progressUpdateResponse = true;
        this._progressUpdateResponse = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool operationState;
      public bool sqlState;
      public bool errorCode;
      public bool errorMessage;
      public bool taskStatus;
      public bool operationStarted;
      public bool operationCompleted;
      public bool hasResultSet;
      public bool progressUpdateResponse;
    }

    public TGetOperationStatusResp()
    {
    }

    public TGetOperationStatusResp(TStatus status) : this()
    {
      this.Status = status;
    }

    public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        bool isset_status = false;
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct)
              {
                Status = new TStatus();
                await Status.ReadAsync(iprot, cancellationToken);
                isset_status = true;
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 2:
              if (field.Type == TType.I32)
              {
                OperationState = (TOperationState)await iprot.ReadI32Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 3:
              if (field.Type == TType.String)
              {
                SqlState = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 4:
              if (field.Type == TType.I32)
              {
                ErrorCode = await iprot.ReadI32Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 5:
              if (field.Type == TType.String)
              {
                ErrorMessage = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 6:
              if (field.Type == TType.String)
              {
                TaskStatus = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 7:
              if (field.Type == TType.I64)
              {
                OperationStarted = await iprot.ReadI64Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 8:
              if (field.Type == TType.I64)
              {
                OperationCompleted = await iprot.ReadI64Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 9:
              if (field.Type == TType.Bool)
              {
                HasResultSet = await iprot.ReadBoolAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 10:
              if (field.Type == TType.Struct)
              {
                ProgressUpdateResponse = new TProgressUpdateResp();
                await ProgressUpdateResponse.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
        if (!isset_status)
        {
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        }
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var struc = new TStruct("TGetOperationStatusResp");
        await oprot.WriteStructBeginAsync(struc, cancellationToken);
        var field = new TField();
        field.Name = "status";
        field.Type = TType.Struct;
        field.ID = 1;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await Status.WriteAsync(oprot, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
        if (__isset.operationState)
        {
          field.Name = "operationState";
          field.Type = TType.I32;
          field.ID = 2;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteI32Async((int)OperationState, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (SqlState != null && __isset.sqlState)
        {
          field.Name = "sqlState";
          field.Type = TType.String;
          field.ID = 3;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteStringAsync(SqlState, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (__isset.errorCode)
        {
          field.Name = "errorCode";
          field.Type = TType.I32;
          field.ID = 4;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteI32Async(ErrorCode, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (ErrorMessage != null && __isset.errorMessage)
        {
          field.Name = "errorMessage";
          field.Type = TType.String;
          field.ID = 5;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteStringAsync(ErrorMessage, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (TaskStatus != null && __isset.taskStatus)
        {
          field.Name = "taskStatus";
          field.Type = TType.String;
          field.ID = 6;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteStringAsync(TaskStatus, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (__isset.operationStarted)
        {
          field.Name = "operationStarted";
          field.Type = TType.I64;
          field.ID = 7;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteI64Async(OperationStarted, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (__isset.operationCompleted)
        {
          field.Name = "operationCompleted";
          field.Type = TType.I64;
          field.ID = 8;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteI64Async(OperationCompleted, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (__isset.hasResultSet)
        {
          field.Name = "hasResultSet";
          field.Type = TType.Bool;
          field.ID = 9;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteBoolAsync(HasResultSet, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (ProgressUpdateResponse != null && __isset.progressUpdateResponse)
        {
          field.Name = "progressUpdateResponse";
          field.Type = TType.Struct;
          field.ID = 10;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await ProgressUpdateResponse.WriteAsync(oprot, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString()
    {
      var sb = new StringBuilder("TGetOperationStatusResp(");
      sb.Append(", Status: ");
      sb.Append(Status== null ? "<null>" : Status.ToString());
      if (__isset.operationState)
      {
        sb.Append(", OperationState: ");
        sb.Append(OperationState);
      }
      if (SqlState != null && __isset.sqlState)
      {
        sb.Append(", SqlState: ");
        sb.Append(SqlState);
      }
      if (__isset.errorCode)
      {
        sb.Append(", ErrorCode: ");
        sb.Append(ErrorCode);
      }
      if (ErrorMessage != null && __isset.errorMessage)
      {
        sb.Append(", ErrorMessage: ");
        sb.Append(ErrorMessage);
      }
      if (TaskStatus != null && __isset.taskStatus)
      {
        sb.Append(", TaskStatus: ");
        sb.Append(TaskStatus);
      }
      if (__isset.operationStarted)
      {
        sb.Append(", OperationStarted: ");
        sb.Append(OperationStarted);
      }
      if (__isset.operationCompleted)
      {
        sb.Append(", OperationCompleted: ");
        sb.Append(OperationCompleted);
      }
      if (__isset.hasResultSet)
      {
        sb.Append(", HasResultSet: ");
        sb.Append(HasResultSet);
      }
      if (ProgressUpdateResponse != null && __isset.progressUpdateResponse)
      {
        sb.Append(", ProgressUpdateResponse: ");
        sb.Append(ProgressUpdateResponse);
      }
      sb.Append(")");
      return sb.ToString();
    }
  }

}
