/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Threading;
using System.Threading.Tasks;
using Thrift;
using Thrift.Collections;

using Thrift.Protocols;
using Thrift.Protocols.Entities;
using Thrift.Protocols.Utilities;
using Thrift.Transports;
using Thrift.Transports.Client;
using Thrift.Transports.Server;


namespace Apache.Hive.Service.Rpc.Thrift
{

  public partial class TExecuteStatementReq : TBase
  {
    private Dictionary<string, string> _confOverlay;
    private bool _runAsync;
    private long _queryTimeout;

    public TSessionHandle SessionHandle { get; set; }

    public string Statement { get; set; }

    public Dictionary<string, string> ConfOverlay
    {
      get
      {
        return _confOverlay;
      }
      set
      {
        __isset.confOverlay = true;
        this._confOverlay = value;
      }
    }

    public bool RunAsync
    {
      get
      {
        return _runAsync;
      }
      set
      {
        __isset.runAsync = true;
        this._runAsync = value;
      }
    }

    public long QueryTimeout
    {
      get
      {
        return _queryTimeout;
      }
      set
      {
        __isset.queryTimeout = true;
        this._queryTimeout = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool confOverlay;
      public bool runAsync;
      public bool queryTimeout;
    }

    public TExecuteStatementReq()
    {
      this._runAsync = false;
      this.__isset.runAsync = true;
      this._queryTimeout = 0;
      this.__isset.queryTimeout = true;
    }

    public TExecuteStatementReq(TSessionHandle sessionHandle, string statement) : this()
    {
      this.SessionHandle = sessionHandle;
      this.Statement = statement;
    }

    public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        bool isset_sessionHandle = false;
        bool isset_statement = false;
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct)
              {
                SessionHandle = new TSessionHandle();
                await SessionHandle.ReadAsync(iprot, cancellationToken);
                isset_sessionHandle = true;
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 2:
              if (field.Type == TType.String)
              {
                Statement = await iprot.ReadStringAsync(cancellationToken);
                isset_statement = true;
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 3:
              if (field.Type == TType.Map)
              {
                {
                  ConfOverlay = new Dictionary<string, string>();
                  TMap _map86 = await iprot.ReadMapBeginAsync(cancellationToken);
                  for(int _i87 = 0; _i87 < _map86.Count; ++_i87)
                  {
                    string _key88;
                    string _val89;
                    _key88 = await iprot.ReadStringAsync(cancellationToken);
                    _val89 = await iprot.ReadStringAsync(cancellationToken);
                    ConfOverlay[_key88] = _val89;
                  }
                  await iprot.ReadMapEndAsync(cancellationToken);
                }
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 4:
              if (field.Type == TType.Bool)
              {
                RunAsync = await iprot.ReadBoolAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 5:
              if (field.Type == TType.I64)
              {
                QueryTimeout = await iprot.ReadI64Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
        if (!isset_sessionHandle)
        {
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        }
        if (!isset_statement)
        {
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        }
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var struc = new TStruct("TExecuteStatementReq");
        await oprot.WriteStructBeginAsync(struc, cancellationToken);
        var field = new TField();
        field.Name = "sessionHandle";
        field.Type = TType.Struct;
        field.ID = 1;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await SessionHandle.WriteAsync(oprot, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
        field.Name = "statement";
        field.Type = TType.String;
        field.ID = 2;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteStringAsync(Statement, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
        if (ConfOverlay != null && __isset.confOverlay)
        {
          field.Name = "confOverlay";
          field.Type = TType.Map;
          field.ID = 3;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          {
            await oprot.WriteMapBeginAsync(new TMap(TType.String, TType.String, ConfOverlay.Count), cancellationToken);
            foreach (string _iter90 in ConfOverlay.Keys)
            {
              await oprot.WriteStringAsync(_iter90, cancellationToken);
              await oprot.WriteStringAsync(ConfOverlay[_iter90], cancellationToken);
            }
            await oprot.WriteMapEndAsync(cancellationToken);
          }
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (__isset.runAsync)
        {
          field.Name = "runAsync";
          field.Type = TType.Bool;
          field.ID = 4;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteBoolAsync(RunAsync, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (__isset.queryTimeout)
        {
          field.Name = "queryTimeout";
          field.Type = TType.I64;
          field.ID = 5;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteI64Async(QueryTimeout, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString()
    {
      var sb = new StringBuilder("TExecuteStatementReq(");
      sb.Append(", SessionHandle: ");
      sb.Append(SessionHandle== null ? "<null>" : SessionHandle.ToString());
      sb.Append(", Statement: ");
      sb.Append(Statement);
      if (ConfOverlay != null && __isset.confOverlay)
      {
        sb.Append(", ConfOverlay: ");
        sb.Append(ConfOverlay);
      }
      if (__isset.runAsync)
      {
        sb.Append(", RunAsync: ");
        sb.Append(RunAsync);
      }
      if (__isset.queryTimeout)
      {
        sb.Append(", QueryTimeout: ");
        sb.Append(QueryTimeout);
      }
      sb.Append(")");
      return sb.ToString();
    }
  }

}
