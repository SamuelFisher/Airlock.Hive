/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Threading;
using System.Threading.Tasks;
using Thrift;
using Thrift.Collections;

using Thrift.Protocols;
using Thrift.Protocols.Entities;
using Thrift.Protocols.Utilities;
using Thrift.Transports;
using Thrift.Transports.Client;
using Thrift.Transports.Server;


namespace Apache.Hive.Service.Rpc.Thrift
{

  public partial class TProgressUpdateResp : TBase
  {

    public List<string> HeaderNames { get; set; }

    public List<List<string>> Rows { get; set; }

    public double ProgressedPercentage { get; set; }

    /// <summary>
    /// 
    /// <seealso cref="TJobExecutionStatus"/>
    /// </summary>
    public TJobExecutionStatus Status { get; set; }

    public string FooterSummary { get; set; }

    public long StartTime { get; set; }

    public TProgressUpdateResp()
    {
    }

    public TProgressUpdateResp(List<string> headerNames, List<List<string>> rows, double progressedPercentage, TJobExecutionStatus status, string footerSummary, long startTime) : this()
    {
      this.HeaderNames = headerNames;
      this.Rows = rows;
      this.ProgressedPercentage = progressedPercentage;
      this.Status = status;
      this.FooterSummary = footerSummary;
      this.StartTime = startTime;
    }

    public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        bool isset_headerNames = false;
        bool isset_rows = false;
        bool isset_progressedPercentage = false;
        bool isset_status = false;
        bool isset_footerSummary = false;
        bool isset_startTime = false;
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.List)
              {
                {
                  HeaderNames = new List<string>();
                  TList _list95 = await iprot.ReadListBeginAsync(cancellationToken);
                  for(int _i96 = 0; _i96 < _list95.Count; ++_i96)
                  {
                    string _elem97;
                    _elem97 = await iprot.ReadStringAsync(cancellationToken);
                    HeaderNames.Add(_elem97);
                  }
                  await iprot.ReadListEndAsync(cancellationToken);
                }
                isset_headerNames = true;
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 2:
              if (field.Type == TType.List)
              {
                {
                  Rows = new List<List<string>>();
                  TList _list98 = await iprot.ReadListBeginAsync(cancellationToken);
                  for(int _i99 = 0; _i99 < _list98.Count; ++_i99)
                  {
                    List<string> _elem100;
                    {
                      _elem100 = new List<string>();
                      TList _list101 = await iprot.ReadListBeginAsync(cancellationToken);
                      for(int _i102 = 0; _i102 < _list101.Count; ++_i102)
                      {
                        string _elem103;
                        _elem103 = await iprot.ReadStringAsync(cancellationToken);
                        _elem100.Add(_elem103);
                      }
                      await iprot.ReadListEndAsync(cancellationToken);
                    }
                    Rows.Add(_elem100);
                  }
                  await iprot.ReadListEndAsync(cancellationToken);
                }
                isset_rows = true;
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 3:
              if (field.Type == TType.Double)
              {
                ProgressedPercentage = await iprot.ReadDoubleAsync(cancellationToken);
                isset_progressedPercentage = true;
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 4:
              if (field.Type == TType.I32)
              {
                Status = (TJobExecutionStatus)await iprot.ReadI32Async(cancellationToken);
                isset_status = true;
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 5:
              if (field.Type == TType.String)
              {
                FooterSummary = await iprot.ReadStringAsync(cancellationToken);
                isset_footerSummary = true;
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 6:
              if (field.Type == TType.I64)
              {
                StartTime = await iprot.ReadI64Async(cancellationToken);
                isset_startTime = true;
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
        if (!isset_headerNames)
        {
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        }
        if (!isset_rows)
        {
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        }
        if (!isset_progressedPercentage)
        {
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        }
        if (!isset_status)
        {
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        }
        if (!isset_footerSummary)
        {
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        }
        if (!isset_startTime)
        {
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        }
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var struc = new TStruct("TProgressUpdateResp");
        await oprot.WriteStructBeginAsync(struc, cancellationToken);
        var field = new TField();
        field.Name = "headerNames";
        field.Type = TType.List;
        field.ID = 1;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        {
          await oprot.WriteListBeginAsync(new TList(TType.String, HeaderNames.Count), cancellationToken);
          foreach (string _iter104 in HeaderNames)
          {
            await oprot.WriteStringAsync(_iter104, cancellationToken);
          }
          await oprot.WriteListEndAsync(cancellationToken);
        }
        await oprot.WriteFieldEndAsync(cancellationToken);
        field.Name = "rows";
        field.Type = TType.List;
        field.ID = 2;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        {
          await oprot.WriteListBeginAsync(new TList(TType.List, Rows.Count), cancellationToken);
          foreach (List<string> _iter105 in Rows)
          {
            {
              await oprot.WriteListBeginAsync(new TList(TType.String, _iter105.Count), cancellationToken);
              foreach (string _iter106 in _iter105)
              {
                await oprot.WriteStringAsync(_iter106, cancellationToken);
              }
              await oprot.WriteListEndAsync(cancellationToken);
            }
          }
          await oprot.WriteListEndAsync(cancellationToken);
        }
        await oprot.WriteFieldEndAsync(cancellationToken);
        field.Name = "progressedPercentage";
        field.Type = TType.Double;
        field.ID = 3;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteDoubleAsync(ProgressedPercentage, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
        field.Name = "status";
        field.Type = TType.I32;
        field.ID = 4;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteI32Async((int)Status, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
        field.Name = "footerSummary";
        field.Type = TType.String;
        field.ID = 5;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteStringAsync(FooterSummary, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
        field.Name = "startTime";
        field.Type = TType.I64;
        field.ID = 6;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteI64Async(StartTime, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString()
    {
      var sb = new StringBuilder("TProgressUpdateResp(");
      sb.Append(", HeaderNames: ");
      sb.Append(HeaderNames);
      sb.Append(", Rows: ");
      sb.Append(Rows);
      sb.Append(", ProgressedPercentage: ");
      sb.Append(ProgressedPercentage);
      sb.Append(", Status: ");
      sb.Append(Status);
      sb.Append(", FooterSummary: ");
      sb.Append(FooterSummary);
      sb.Append(", StartTime: ");
      sb.Append(StartTime);
      sb.Append(")");
      return sb.ToString();
    }
  }

}
